# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#dsdsdsd
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - image
  - push
  - deploy
variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  NAMESPACE: "diod" #MUST be lowercase
  APP: "diod" #MUST be lowercase
  # REG_CREDS: xxx  (Set Registry Authentication in Gitlab Environment variable)
  # REGISTRY_NAMESPACE: "kevindubois" (set REGISTRY_NAMESPACE in Gitlab Environment variable)
  REGISTRY: "quay.io"
  DEV_TAG: "latest"
  PROD_TAG: "latest"

# This template uses jdk8 for verifying and deploying images
image: maven:3.8.6-jdk-11

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

default:
  tags:
    - "openshift"


build-job:       # This job runs in the build stage, which runs first.
  stage: build
  tags: 
    - openshift
  script:
    - 'mvn $MAVEN_CLI_OPTS clean package'
    - echo "Compile complete."

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 60
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

buildah-job:
  stage: build
  image: quay.io/containers/buildah
  script:
    - export STORAGE_DRIVER=vfs && buildah build -t antennas-front:${DEV_TAG} -f src/main/docker/Dockerfile .

push-job:
  stage: push
  image: quay.io/skopeo/stable:latest
  script: 
    - echo "pushing to quay"
    - skopeo copy --dest-creds ${REG_CREDS} docker://antennas-front:${DEV_TAG} docker://${REGISTRY}/${REGISTRY_NAMESPACE}/${APP}:${DEV_TAG}

#potentially some logic to test the pushed image and then promote it to a $PROD_TAG
# integration-test-job
#   stage: integration
#   environment: staging
#   script:
#     - "oc project $NAMESPACE-staging"
#     - "oc new-app --image=${REGISTRY}/${REGISTRY_NAMESPACE}/${APP}:${DEV_TAG} --name=$APP
#     - echo "testing on staging environment"
#     - skopeo copy --dest-creds ${REG_CREDS} docker://antennas-front docker://${REGISTRY}/${REGISTRY_NAMESPACE}/${APP}:${PROD_TAG}

deploy-job:      
  stage: deploy  
  environment: production
  image: quay.io/openshift/origin-cli:4.11
  script:
    - "oc project $NAMESPACE"
    - "oc new-app --image=${REGISTRY}/${REGISTRY_NAMESPACE}/${APP}:${PROD_TAG} --name=$APP"

